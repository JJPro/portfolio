server {
  listen 80 default_server;
  server_name _;
  root /var/www/html;
  index index.php;

  location / {
    try_files $uri $uri/ /index.php?$args;
    # handle OPTIONS requests from window.fetch
    if ($request_method = OPTIONS ) {
      add_header Access-Control-Allow-Origin "*";
      add_header Access-Control-Allow-Methods "GET, OPTIONS";
      add_header Access-Control-Allow-Headers "Authorization,content-type";
      add_header Access-Control-Allow-Credentials "true";
      add_header Content-Length 0;
      add_header Content-Type text/plain;
      return 200;
    }
  }

  location = /favicon.ico {
    log_not_found off;
    access_log off;
  }
  #robots.txt fallback to index.php
  location = /robots.txt {
    # Some WordPress plugin generate robots.txt file
    allow all;
    try_files $uri $uri/ /index.php?args @robots;
    access_log off;
    log_not_found off;
  }
  # additional fallback if robots.txt doesn't exist
  location @robots {
    return 200 "User-agent: *\nDisallow: /wp-admin/\nAllow: /wp-admin/admin-ajax.php\n";
  }
  # Deny all attempts to access hidden files such as .htaccess, .htpasswd, .DS_Store (Mac) excepted .well-known directory.
  # Keep logging the requests to parse later (or to pass to firewall utilities such as fail2ban)
  location ~ /\.(?!well-known\/) {
    deny all;
  }

  # Deny access to any files with a .php extension in the uploads directory for the single site
  location /wp-content/uploads {
    location ~ \.php$ {
      deny all;
    }
  }


  # Deny access to any files with a .php extension in the uploads directory
  # Works in sub-directory installs and also in multisite network
  # Keep logging the requests to parse later (or to pass to firewall utilities such as fail2ban)
  location ~* /(?:uploads|files)/.*\.php$ {
    deny all;
  }


  location ~ \.php$ {
    include fastcgi_params;
    fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
    fastcgi_pass	wordpress:9000;
  }

  location ~* \.(js|css|png|jpg|jpeg|gif|ico)$ {
    expires max;
    log_not_found off;
  }

  location ~ ^/wp-json/ {
    rewrite ^/wp-json/(.*?)$ /?rest_route=/$1 last;
  }
}